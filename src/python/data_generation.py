"""Generates files listing sequences generated by some model.
each line in the file is a seperate sequence.

2 types of files are created:
file.txt - original sequences generated by the model(random for now)
noisy_file.txt - the sequences after some noise sub_sequence was inserted to them at random.

file format:
- each line is a seperate sequence.item/letters of the sequence are se[erated by commas.
- the noisy file start with a header:
   header format: #[sequence] noise_probability //other comments
"""


import numpy as np
import sys
import random



alphabet = ['A','B','C','D'];  filename='file1.txt'
num_sequences=1000;            probability=0.07


"""writes the list of sequences to a file.
each sequence is writen to a seperate file and items(letters) in a sequence are seperated with commas.
adds a header as the first line of the file if given."""
def write_sequences_to_file(list_of_sequences,filename,header=None):
    to_write = ""
    
    #append all the list to one big string for writing it all at once later.
    for sequence in list_of_sequences:
        to_write += str(sequence)[1:-1] + '\n' #add new sequence [A,B,C] as "A B C" 

    write_to_file(filename,to_write)


def write_to_file(filename,to_write,header=None):
    #trim useless characters
    #to_write = to_write.replace("'","")
    #to_write = to_write.replace(" ","")
    #to_write = to_write.replace(",","")
    
    if header != None:
        to_write = header + '\n' + to_write


    open(filename, "wb").write(to_write)


#helper to create the files and sequences.
def generate_sequences(noise,probability,filename,num_sequences,alphabet = ['A','B','C','D']):
    all_sequences = []
    for i in range(num_sequences):
        sequence_length = random.randint(300,600)
        all_sequences.append(generate_random_sequence(alphabet,sequence_length))

    write_sequences_to_file(all_sequences,filename)

    for i in range(num_sequences):
        all_sequences[i] = insert_noise_to_sequence(all_sequences[i],noise,probability)

    header = "#" + str(noise)[1:-1] + ' ' + str(probability) + ' //number of noise sequence inserted is noraml distributed with mean=length(sequence)*probability'
    write_sequences_to_file(all_sequences,'noisy_'+filename,header)


""" gets a sequence as a list and insert items(noise) to the list at random indexs.
noise will be inserted at each index with the given probability,so in a list of length n,
n*probability noise items will be inserted and function will return list of size n+n*probability*length(noise).
see (1) for insert_noise_in_other_noise explanition."""
def insert_noise_to_sequence(sequence,noise, probability,  insert_noise_in_other_noise = False):
    
    mean = int(len(sequence)*probability)
    #n is number of times to insert the noise sub-seq.for now n is taken from normal disturbiution.
    n = int(np.random.normal(loc=mean, scale=5.0)) #should prob change this to get any disturbiution function.
    
    #create random indexes to insert noise.
    random_numbers = [random.randint(0,len(sequence)) for i in range(n)]
    random_numbers.sort()

    """ (1) keep track of how much noise we added.
    by doing so,we make sure we will not insert a noise sequence in between another earlier noise sequence.
    (e.g we had AB and inserted noise to make AXYZB.this algorithm will NOT break the first XYZ like so:AXYXYZZB)"""
    if not insert_noise_to_sequence:
        noise_offset = len(noise)
    else:
         noise_offset = 0 #ignore offset by keeping it zero.

    offset_from_noise = 0
    
    for number in random_numbers:
        #add the noise list at each random index.
        sequence[number+offset_from_noise:number+offset_from_noise] = noise
        offset_from_noise += noise_offset


    return sequence



def generate_random_sequence(alphabet,sequence_length):
     seq = []
     #takes a random item from the alphabet each iteration and append to the sequence.
     for i in range(sequence_length):
        seq.append(random.choice(alphabet))

     return seq

#how many time the sub-seq is shown in the full sequence.
def count_frequency(sequence,sub_sequence):
    length = len(sub_sequence)
    count = 0
    for i in range(len(sequence) - length):
        if sequence[i:i+length] == sub_sequence:
            count +=1
    return count





#generate_sequences(['A','B','C'],probability=0.07,filename='file1.txt',num_sequences=10000,alphabet = ['A','B','C','D'])


noise = list('noise')
text = open('1984.txt').read()
text = text.lower()
text = list(text)
noisy_text = insert_noise_to_sequence(text,noise,0.005)
write_to_file('1984_noise.txt',''.join(noisy_text))
